<?xml version="1.0" encoding="UTF-8"?>

<functions>
  <function>
    <prefix>col</prefix>
    <name>get</name>
    <description>Returns the element at the specified position in this list.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.lang.Object get(java.lang.Object,int)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isEmpty</name>
    <description><![CDATA[Null-safe check if the specified collection is empty.
      <p>Null returns true.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isEmpty(java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>size</name>
    <description>Gets the size of the collection/iterator specified.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>int size(java.lang.Object)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>removeAll</name>
    <description><![CDATA[Removes the elements in <code>remove</code> from <code>collection</code>. That is, this
      method returns a collection containing all the elements in <code>c</code>
      that are not in <code>remove</code>. The cardinality of an element <code>e</code>
      in the returned collection is the same as the cardinality of <code>e</code>
      in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which
      case the cardinality is zero. This method is useful if you do not wish to modify
      the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection removeAll(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>retainAll</name>
    <description><![CDATA[Returns a collection containing all the elements in <code>collection</code>
      that are also in <code>retain</code>. The cardinality of an element <code>e</code>
      in the returned collection is the same as the cardinality of <code>e</code>
      in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which
      case the cardinality is zero. This method is useful if you do not wish to modify
      the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection retainAll(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>index</name>
    <description>Given an Object, and an index, returns the nth value in the object.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.lang.Object index(java.lang.Object,java.lang.Object)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>subtract</name>
    <description><![CDATA[Returns a new {@link Collection} containing <tt><i>a</i> - <i>b</i></tt>.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection subtract(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>union</name>
    <description>Returns a {@link Collection} containing the union of the given {@link Collection}s.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection union(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>intersection</name>
    <description>Returns a {@link Collection} containing the intersection
      of the given {@link Collection}s.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection intersection(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>containsAny</name>
    <description><![CDATA[Returns <code>true</code> iff at least one element is in both collections.
      <p>In other words, this method returns <code>true</code> iff the
      {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean containsAny(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isFull</name>
    <description>Returns true if no more elements can be added to the Collection.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isFull(java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isNotEmpty</name>
    <description><![CDATA[Null-safe check if the specified collection is not empty.
      <p>Null returns false.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isNotEmpty(java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>disjunction</name>
    <description><![CDATA[Returns a {@link Collection} containing the exclusive disjunction
      (symmetric difference) of the given {@link Collection}s.
      <p>
      The cardinality of each element <i>e</i> in the returned {@link Collection}
      will be equal to
      <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.
      <p>
      This is equivalent to
      <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>
      or
      <tt>{@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})</tt>.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection disjunction(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isSubCollection</name>
    <description><![CDATA[Returns <tt>true</tt> iff <i>a</i> is a sub-collection of <i>b</i>,
      that is, iff the cardinality of <i>e</i> in <i>a</i> is less
      than or equal to the cardinality of <i>e</i> in <i>b</i>,
      for each element <i>e</i> in <i>a</i>.

      <p>Example:
      <p>
      <table border="1">
        <tr>
          <td> *** Variables *** </td>
          <td> </td>
          <td> </td>
          <td> </td>
          <td> </td>
        </tr>
        <tr>
          <td> @{col1}= </td>
          <td> hello </td>
          <td> world </td>
          <td> good morning </td>
          <td> good night </td>
        </tr>
        <tr>
          <td> @{col2}= </td>
          <td> hello </td>
          <td> good morning </td>
          <td> good night </td>
          <td> </td>
        </tr>
        <tr>
          <td> @{col3}= </td>
          <td> 2 </td>
          <td> 3 </td>
          <td> 4 </td>
          <td> 5 </td>
        </tr>
        <tr>
          <td> @{col4}= </td>
          <td> 5 </td>
          <td> 3 </td>
          <td> 7 </td>
          <td> </td>
        </tr>
      </table>

      <p>
      <table>
        <tr>
          <td> El Should Be True </td>
          <td> $[col:isSubCollection(var('col2'), var('col1'))] </td>
        </tr>
        <tr>
          <td> El Should Be False </td>
          <td> $[col:isSubCollection(var('col3'), var('col4'))] </td>
        </tr>
      </table>]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isSubCollection(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isProperSubCollection</name>
    <description><![CDATA[Returns <tt>true</tt> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,
      that is, iff the cardinality of <i>e</i> in <i>a</i> is less
      than or equal to the cardinality of <i>e</i> in <i>b</i>,
      for each element <i>e</i> in <i>a</i>, and there is at least one
      element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>
      is strictly greater than the cardinality of <i>f</i> in <i>a</i>.
      <p>
      The implementation assumes
      <ul>
        <li><code>a.size()</code> and <code>b.size()</code> represent the
        total cardinality of <i>a</i> and <i>b</i>, resp. </li>
        <li><code>a.size() < Integer.MAXVALUE</code></li>
      </ul>]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isProperSubCollection(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>isEqualCollection</name>
    <description><![CDATA[Returns <tt>true</tt> iff the given {@link Collection}s contain
      exactly the same elements with exactly the same cardinalities.
      <p>
      That is, iff the cardinality of <i>e</i> in <i>a</i> is
      equal to the cardinality of <i>e</i> in <i>b</i>,
      for each element <i>e</i> in <i>a</i> or <i>b</i>.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean isEqualCollection(java.util.Collection,java.util.Collection)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>addIgnoreNull</name>
    <description>Adds an element to the collection unless the element is null.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean addIgnoreNull(java.util.Collection,java.lang.Object)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>sizeIsEmpty</name>
    <description>Checks if the specified collection/array/iterator is empty.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>boolean sizeIsEmpty(java.lang.Object)</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>reverseArray</name>
    <description>Reverses the order of the given array.</description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>void reverseArray(java.lang.Object[])</function-signature>
  </function>
  <function>
    <prefix>col</prefix>
    <name>typedCollection</name>
    <description><![CDATA[Returns a typed collection backed by the given collection.
      <p>Only objects of the specified type can be added to the collection.]]></description>
    <function-class>org.apache.commons.collections.CollectionUtils</function-class>
    <function-signature>java.util.Collection typedCollection(java.util.Collection,java.lang.Class)</function-signature>
  </function>
</functions>