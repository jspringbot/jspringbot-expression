A test library providing expression language support.

With this library enabled, all jSpringBot library keywords within scope will have expression language support.

Please see the example {{Expression Library}} projects.

| *Example Projects* | *Description* |
| {{jspringbot-github-simple:sample-expression|Simple Sample}} | A test project demonstrating the {{Expression Library}} keywords. |
| {{jspringbot-github-simple:sample-config|Config Library Sample}} | A test project demonstrating {{jspringbot-doc:config}} expression support and its keywords. |
| {{jspringbot-github-simple:sample-i18n|i18n Library Sample}} | A test project demonstrating {{jspringbot-doc:i18n}} expression support and its keywords. |

= Configuration =

Configure the following to use jspringbot-expression.

1. Add this artifact in maven dependency

|  <dependencies>
|    <dependency>
|      <groupId>org.jspringbot</groupId>
|      <artifactId>jspringbot-expression</artifactId>
|    </dependency>
|  </dependencies>

2. Import spring-expression in {{jspringbot-global.xml}}

| <import resource="classpath:spring/spring-expression.xml"/>

3. Add {{JSpringBotGlobal}} library in the in the test suite settings.

| *** Settings *** |
| Library | JSpringBotGlobal |

= Expression Language =

The EL allows page authors to use simple expressions to dynamically access data from library components.

== Literal Expressions ==

EL makes it easy to define literal expressions of different types.

| *Expression*         | *Type*        | *Result*            |
| $['stringLiteral']   | {{String}}    | {{'stringLiteral'}} |
| $[100]               | {{Long}}      | {{100l}}            |
| $[5.43]              | {{Double}}    | {{5.43}}            |
| $[true]              | {{Boolean}}   | {{true}}            |
| $[null]              |               | {{null}}            |

Literal expressions can be evaluated immediately or deferred and can be either value or method expressions.

== Operators ==

The EL provides the following operators, which can be used in your expressions:

- *Arithmetic:* {{+}}, {{-}} (binary), {{*}}, {{/}} and {{div}}, {{%}} and {{mod}}, {{-}} (unary)
- *Relational:* {{==}}, {{eq}}, {{!=}}, {{ne}}, {{<}}, {{lt}}, {{>}}, {{gt}}, {{<=}}, {{ge}}, {{>=}}, {{le}}. Comparisons can be made against other values or against Boolean, string, integer, or floating-point literals.
- *Empty:* The {{empty}} operator is a prefix operation that can be used to determine whether a value is {{null}} or {{empty}}.
- *Conditional:* {{A ? B : C}}. Evaluate {{B}} or {{C}}, depending on the result of the evaluation of {{A}}.

The precedence of operators highest to lowest, left to right is as follows:

- {{[] .}}
- {{()}} (used to change the precedence of operators)
- {{-}} (unary) {{not ! empty}}
- {{* / div % mod}}
- {{+ -}} (binary)
- {{< > <= >= lt gt le ge}}
- {{== != eq ne}}
- {{&& and}}
- {{|| or}}
- {{? :}}

== Reserved Words ==

The following words are reserved for the EL and should not be used as identifiers:

| {{and}} | {{or}} | {{not}} | {{eq}} |
| {{ne}} | {{lt}} | {{gt}} | {{le}} |
| {{ge}} | {{true}} | {{false}} | {{null}} |
| {{instanceof}} | {{empty}} | {{div}} | {{mod}} |

== Functions ==

{{Expression Library}} has a rich set of functions for manipulating data of different types.

| *Type* | *Prefix* | *Description* |
| {{jspringbot-function:string|String}} | | Supported most of [http://commons.apache.org/lang/api-2.5/org/apache/commons/lang/StringUtils.html|StringUtils] methods. |
| {{jspringbot-function:string|StringEscape}} | | Supported most of [http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html|StringEscapeUtils] methods. |
| {{jspringbot-function:math|Math}} | math |  Supported most of [http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html|Math] methods. |
| {{jspringbot-function:collection|Collection}} | col | Supported most of [http://commons.apache.org/collections/apidocs/org/apache/commons/collections/CollectionUtils.html|CollectionUtils] methods. |
| {{jspringbot-function:collection|Map}} | map | Supported most of [http://commons.apache.org/collections/apidocs/org/apache/commons/collections/MapUtils.html|MapUtils] methods. |
| {{jspringbot-function:collection|Arrays}} | array | For now only {{array:asList(*items)}} method is supported. |
| {{jspringbot-function:xml|XML}} | xml | Support jSpringBot XML keywords as functions. |
| {{jspringbot-function:json|JSON}} | json | Support jSpringBot JSON keywords as functions. |

You can also view the jspringbot function documentation to view all available functions.

*Additional Methods:*

| *Method* | *Description* |
| {{eval(expression, *variable)}} | This will evaluate the given expression and variables. |
| {{var(variable)}} | This will return the robot variable given the name. |
| {{replaceVar(str)}} | This replace all robot variables and EL variables from the given string. Variables in this format {{html:<code>}}${elOrRobot}{{html:</code>}}. |
| {{resource(resourceAsText)}} | This return the resource text as string. |

== Converters ==

Here are the converter syntax. These are helpful to minimize statements.

| *Expression Format* | *Type*      |
| $[i:{expression}]  | {{Integer}} |
| $[l:{expression}]  | {{Long}}    |
| $[f:{expression}]  | {{Float}}   |
| $[d:{expression}]  | {{Double}}  |
| $[s:{expression}]  | {{String}}  |
| $[b:{expression}]  | {{Boolean}} |

Where:

- {{expression}} is the expression statement even for expression formats defined by other supported libraries.

== Examples ==

The following table contains example expressions and the result of evaluating them:

| *Expression* | *Result* |
| $[1 > (4/2)] | {{false}} |
| $[4.0 >= 3] | {{true}} |
| $[100.0 == 100] | {{true}} |
| $[(10*10) ne 100] | {{false}} |
| $['a' < 'b'] | {{true}} |
| $['hip' gt 'hit'] | {{false}} |
| $[4 > 3] | {{true}} |
| $[1.2E4 + 1.4] | {{12001.4}} |
| $[3 div 4] | {{0.75}} |
| $[10 mod 4] | {{2l}} |
| $[b:concat('tr', 'ue')] | {{true}} |
| $[i:100] | Since {{100}} is {{Long}}, convert to {{Integer}} by prefixing {{i:}}. |
| $[i:5.43] | {{5}} |
| $[f:5.43] | Since {{5.43}} is {{Double}}, convert to {{Float}} by prefixing {{f:}}. |
| $[not empty var1] | {{false}} if the variable {{var1}} is {{null}} or an empty string. |
| $[contains('alvin', 'vin')] | {{true}} |
| $[i:eval('$[$1 - $2]', 6, 3)] | {{3}} |
| $[math:abs(-1)] | {{1l}} |

{{var(variable)}}

| ${string}=           | `Set Variable`                         | some string |   |   |   |
| ${integer}=          | `Convert To Integer`                   | 100         |
| ${boolean}=          | `Convert To Boolean`                   | true        |
| @{list} =            | `Create List`                          | a           | b | c |   |
| ${dictionary} =      | `Create Dictionary`                    | a           | 1 | b | 2 |
| `EL Should Be True`  | $[var('integer') eq 100]               |
| `EL Should Be True`  | $[var('boolean')]                      |
| `EL Should Be True`  | $[var('list')[0] eq 'a']               |
| `EL Should Be True`  | $[var('dictionary')['a'] eq '1']       |
| `EL Should Be Equal` | $[i:eval('$[$1 - $2]', 6, 3)]          | $[i:3]      |



